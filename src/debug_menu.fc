options( bank: -1 );

use * from common;
use mem;
use my;
use game;
use event;
use savedata;
use menu;

var last_checkpoint:int;

var num:int;
var items:int*[16];
var cur:int;
var title:int*;

function init():void
{
}

function begin(name:int*):void
{
	title = name;
	num = 0;
	cur = 0;
}

function add(item:int*):void
{
	items[num] = item;
	num += 1;
}

const VRAM:int16 = 0x2400;

function select():int
{
	ppu.lock();
	mmc3.MIRROR = 0; // vertical
	ppu.ctrl1_bak = 0b10100001;
	ppu.ctrl2_bak = 0b00011110;
	ppu.scroll1 = 0;
	ppu.scroll2 = 0;
	ppu.fill_in_lock( VRAM, 0x0400, 0 );

	var buf = ppu.alloc(64);
	
	mem.zero(buf, 64);
	menu.text_print(buf, title);
	ppu.put_in_lock(0x400 + ppu.pos(2, 2), buf, 64);
	
	var i:int;
	for(i, 0, num){
		mem.zero(buf, 64);
		menu.text_print(buf, items[i]);
		ppu.put_in_lock(0x400 + ppu.pos(4, i * 2 + 5), buf, 64);
	}
	ppu.unlock();

	var pad_up_old = 0;
	var pad_down_old = 0;
	var pad_a_old = 0;
	var pad_b_old = 0;
	while(1){
		pad.update();
		
		if( (pad.pushed & pad.UP) && cur > 0 ){ cur -= 1; }
		if( (pad.pushed & pad.DOWN) && cur < num-1 ){ cur += 1; }
		if( (pad.pushed & pad.A) ){ return cur; }
		if( (pad.pushed & pad.B) ){ return -1; }

		ppu.sprite( 3*8-2, 6*8+cur*16, SPR_ARROW, 1);
		ppu.wait_vsync();
	}
}

function start():void
{
	var old0 = mmc3.set_cbank(0,fs.CBANK_TEXT+0);
	var old1 = mmc3.set_cbank(1,fs.CBANK_TEXT+2);
	
	while(1){
		begin( _T("メニュー") );
		add( _T("チェックポイント") );
		add( _T("たいとるすきっぷ") );
		add( _T("おーとせーぶ") );
		add( _T("ふらぐりせっと") );
		add( _T("でばっぐもーどOFF") );
		add( _T("ふりーじゃんぷ") );
		switch( select() ){
		case 0:
			if( do_flag() ){ break; }
		case 1:
			do_debug_flag_change(DEBUG_FLAG_TITLE_SKIP, _T("たいとるすきっぷ") );
		case 2:
			do_debug_flag_change(DEBUG_FLAG_AUTO_SAVE, _T("おーとせーぶ") );
		case 3:
			mem.zero(my.flags, my.FLAG_MAX);
			savedata.save();
			break;
		case 4:
			debug_mode = 0;
			savedata.save();
			break;
		case 5:
			do_debug_flag_change(DEBUG_FLAG_FREEJUMP, _T("ふりーじゃんぷ") );
		case -1:
			break;
		}
	}
	
	ppu.lock();
	ppu.ctrl1_bak = 0b10100000;
	ppu.ctrl2_bak = 0b00011110;
	ppu.scroll1 = 0;
	ppu.scroll2 = 0;
	mmc3.set_cbank(0,old0);
	mmc3.set_cbank(1,old1);
	ppu.unlock();
	ppu.wait_vsync();
}

function do_flag():int
{
	begin(_T("チェックポイントを選択"));
	var i:int;
	for( i, 0, MAP_CHECKPOINT_NUM ){
		add( &MAP_CHECKPOINT_DATA[MAP_CHECKPOINT[i]+3] );
	}
	cur = last_checkpoint;
	
	var n = select();
	if( n == -1 ){ return 0; }

	game.game_event = event.ID_MOVE_CHECKPOINT;
	game.game_event_p1 = n;

	return 1;
}

function do_debug_flag_change(mask:int, title:int*):void
{
	var flag = debug_flag & mask;
	flag = do_select(flag, title);
	if( flag ){
		debug_flag = debug_flag | mask;
	}else{
		debug_flag = debug_flag & (-1-mask);
	}
	savedata.save();
}

function do_select(init:int,title:int*):int
{
	begin(title);
	add( _T("OFF") );
	add( _T("ON") );
	if( init ) init = 1;
	cur = init;
	var result = select();
	if( result == -1 ){
		return init;
	}else{
		return result;
	}
}
