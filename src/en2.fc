use my;
use * from en;

/*********************************************
 * 鳥
 *********************************************/

function bird_new(i:int):void
{
	if( p2[i] == 0 ){ p2[i] = 16; }
	p4[i] = px[i];
	p5[i] = py[i];
	p6[i] = 0;
}

function bird_process(i:int):void
{
	var x:int, y:int, dx:int, dy:int;
	var orig_x = p4[i];
	var orig_y = p5[i];
	var dir = p1[i];
	var speed = p2[i];
	var time = p6[i];

	if( time < 128 ){
		var t = time * 2;
		dx = (math.cos(t)/4) - 32;
		dy = -(math.sin(t)/4);
	}else{
		var t = time * 2;
		dx = -(math.cos(t)/4) + 32;
		dy = -(math.sin(t)/4);
	}
	switch( dir ){
	case 0:
		x = orig_x + dx;
		y = orig_y + dy;
	case 1:
		x = orig_x - dx;
		y = orig_y - dy;
	case 2:
		x = orig_x + dy;
		y = orig_y + dx;
	case 3:
		x = orig_x - dy;
		y = orig_y - dx;
	}
	time += (giff+speed)/16;

	var a = (anim/8) % 2;
	var d = py[i];
	if( px[i] > x ){
		d = 0;
	}elsif( px[i] < x ){
		d = 64;
	}
			
	if( p3[i] == 1 && my.items[ITEM_ID_EYE] ){
		if( anim % 2 ) gr_sprite2( x, y, 176+a*4, 1|d);
		if( time > 128 ){ type[i] = 0; return; }
	}else{
		gr_sprite2( x, y, 176+a*4, 1|d);
	}
	
	px[i] = x;
	py[i] = y;
	p6[i] = time;

	if( math.abs(x - my.x) < 8 && math.abs(y - my.y) < 8 && my.state != my.STATE_DYING && my.state != my.STATE_DIE && my.state != my.STATE_DAMAGE){
		my.state = my.STATE_DAMAGE;
		my.vy = -16;
		my.vx = (my.dir*2-1) * 16;
		my.jump_pow = 0;
	}
	// check_hit(i,10);

	py[i] = d;
	
	//if( check_outside(x,y) ){ type[i] = 0; }
}

/*********************************************
 * 石像
 *********************************************/

function statue_new(i:int):void
{
	if( p2[i] == 0 ){ p2[i] = 120; }
}

function statue_process(i:int):void
{
	var x = px[i];
	var y = py[i];
	var dir = p1[i];
	var time = p2[i];
	var wait = p3[i];

	if( wait < (time-20) ){
	}elsif( wait < time ){
		gr_sprite2(x+DIR_VX[dir]*8, y, 168+anim/2%2*4, 0);
	}else{
		var fire = new();
		type[fire] = TYPE_STATUE_FIRE;
		px[fire] = x + DIR_VX[dir]*8;
		py[fire] = y;
		p1[fire] = dir;
		setup(fire);
		wait = 0;
	}
	wait += 1;
	
	//gr_sprite2(x, y, 136+anim/2%2*4, 0);

	p3[i] = wait;
}

/*********************************************
 * 石像の弾
 *********************************************/

function statue_fire_new(i:int):void
{
}

function statue_fire_process(i:int):void
{
	var x = px[i];
	var y = py[i];
	var dir = p1[i];
	
	x += DIR_VX[dir]*2;
	if( bg.cell_type(x,y) & bg.TYPE_WALL ){
		type[i] = 0;
		return;
	}

	gr_sprite2(x, y, 168, anim/2%2);
	
	px[i] = x;
	check_hit(i, 8);
	if( check_outside(x,y) ){ type[i] = 0; }
}

/*********************************************
 * 魚
 *********************************************/

function fish_new(i:int):void
{
	if( p2[i] == 0 ) p2[i] = 8;
	p3[i] = 0;
	p5[i] = 60+math.rand()/4;
	p6[i] = py[i];
	p7[i] = 60;
}

function fish_process(i:int):void
{
	var x = px[i];
	var y = py[i];
	var dir = p1[i];
	var speed = p2[i];
	var stat = p3[i];
	var count:sint8 = p5[i];
	var wait = p7[i];
	var disp = 0;
	var pat:int;

	const ANIM_SWIM = [2,3,4,4,3,2,1,0,0,1];
	
	if( x > 240 ){
		dir = DIR_LEFT;
	}else if(x < 16){
		dir = DIR_RIGHT;
	}
	if( dir == DIR_LEFT ){
		x -= (<sint8>giff+speed)/16;
	}else{
		x += (<sint8>giff+speed)/16;
	}

	switch(stat){
	case 0:
		count -= 1;
		if( count == 0 ){
			count = 0;
			stat = 1;
		}
		
	case 1: // 気付いた！
		count += 1;
		var vx = math.sin(count*8)/32;
		vx = (<uint8>vx) * (<uint8>DIR_VX[dir]);
		x = px[i];
		y -= (giff+4)/16;
		if( count > 32 ){ stat = 2; count = 0; }
	case 2: // 上へ
		y -= 2;
		if( y < 160 ){
			stat = 3;
			count = -32;
			splash(x,160-8);
		}
	case 3: // 水から出た
		count += anim%2;
		y += (giff+count)/16;
		if( y > 160 ){
			splash(x,160-8);
			stat = 4;
			count = 16;
		}
	case 4: // 再び潜る
		y += (giff+count)/16;
		if( y >= p6[i] ){
			y = p6[i];
			wait = 60;
			count = 0;
			stat = 0;
			count = 60+math.rand()/4;
		}
	}

	var dir_flag = [0,0,0,64][dir];
	switch( stat ){
	case 0:
		gr_sprite2(x, y, 32*4+anim/8%2*4, dir_flag|2);
	case 1:
		gr_sprite2(px[i]+vx, y, 34*4+count/8*4, dir_flag|2);
	case 2:
		gr_sprite2(x, y, 40*4, dir_flag|2);
	case 3:
		var pa:int;
		if( count < -8 ){
			pa = 0;
		}else if( count < 8 ){
			pa = anim/8%2*4;
		}else{
			pa = 8;
		}
		gr_sprite2(x, y, 40*4+pa, dir_flag|2);
	case 4:
		gr_sprite2(x, y, 42*4, dir_flag|2);
	}

	check_hit(i,8);

	px[i] = x;
	py[i] = y;
	p1[i] = dir;
	p3[i] = stat;
	p5[i] = count;
	p7[i] = wait;
}

function splash(x:int, y:int):void
{
	var i = new();
	type[i] = TYPE_SPLASH;
	px[i] = x;
	py[i] = y;
	p1[i] = 8;
}

/*********************************************
 * 水門
 *********************************************/

function watergate_new(i:int):void
{
	p2[i] = py[i];
	p3[i] = 0;
}

function watergate_process(i:int):void
{
	var x = px[i];
	var y = py[i];
	var flag_num = p1[i];
	
	if( my.state == my.STATE_ON_ENEMY && my.on_idx == i ){
		if( y < p2[i]+8 ){
			y += 1;
		}else{
			if( p3[i] == 0 ){
				if( my.flags[31] == 0 ){
					watergate_open();
					my.flags[31] = 1;
				}else{
					watergate_close();
					my.flags[31] = 0;
				}
				p3[i] = 1;
			}
		}
	}else{
		if( y > p2[i] ){ y -= 1; }
	}

	
	ppu.sprite( x-8, y-8, 64, 0);
	ppu.sprite( x  , y-8, 64, 64);
	
	px[i] = x;
	py[i] = y;
}

function watergate_open():void
{
	var i:int;
	var j:int;
	for( i, 0, 180 ){
		ppu.scroll2 = math.rand() % [2,4,8,8,4,2][i/30];
		ppu.wait_vsync_with_flag(2);
		anim += 1;
		mmc3.set_cbank(0,CBANK_BG_COMMON+(anim/8)%4*2);
		switch(i){
		case 50:
			bg.put2(9,4,0,0);
			bg.put2(9,11,38,0);
		case 60:
			bg.put2(9,5,0,0);
			bg.put2(9,12,38,0);
		default:
			if( i%2 == 0 && i >= 70 && i < (70+12*3) ){
				var x = (i-70)%12/2;
				var y = (i-70)/12;
				bg.put2(10+x, 10+y, 0, 0 );
				if( y < 2 ) bg.put2(10+x, 11+y, 24, 0 );
			}
		}
	}
	ppu.scroll2 = 0;
	ppu.wait_vsync_with_flag(2);
}

function watergate_close():void
{
	var i:int;
	var j:int;
	for( i, 0, 180 ){
		ppu.scroll2 = math.rand() % [2,4,8,8,4,2][i/30];
		ppu.wait_vsync_with_flag(2);
		anim += 1;
		mmc3.set_cbank(0,CBANK_BG_COMMON+(anim/8)%4*2);
		switch(i){
		case 50:
			bg.put2(9,5,38,0);
			bg.put2(9,12,0,0);
		case 60:
			bg.put2(9,4,38,0);
			bg.put2(9,11,0,0);
		default:
			if( i%2 == 0 && i >= 70 && i < (70+12*3) ){
				var x = (i-70)%12/2;
				var y = (i-70)/12;
				if( y > 0 ) bg.put2(10+x, 13-y, 0, 0 );
				bg.put2(10+x, 12-y, 24, 0 );
			}
		}
	}
	ppu.scroll2 = 0;
	ppu.wait_vsync_with_flag(2);
}

/*********************************************
 * 色スイッチ
 *********************************************/

function colorswitch_new(i:int):void
{
	p2[i] = py[i];
	if( my.flags[my.FLAG_COLORSWITCH] == p1[i] ){
		py[i] = py[i] + 4;
	}
}

function colorswitch_process(i:int):void
{
	var x = px[i];
	var y = py[i];
	var flag_num = p1[i];

	var enemy_on = colorswitch_check_enemy_on(i);

	if( (my.state == my.STATE_ON_ENEMY && my.on_idx == i) || enemy_on ){
		if( y < p2[i]+4 ){
			y += 1;
		}else{
			if( my.flags[my.FLAG_COLORSWITCH] != flag_num ){
				my.flags[my.FLAG_COLORSWITCH] = flag_num;
				colorswitch_redraw_area();
			}
		}
	}else{
		if( my.flags[my.FLAG_COLORSWITCH] != flag_num ){
			if( y > p2[i] ){
				y -= 1;
			}
		}
	}
	
	ppu.sprite( x-8, y-8, 192+flag_num*4, 0|32|3);
	ppu.sprite( x  , y-8, 192+flag_num*4, 64|32|3);
	
	px[i] = x;
	py[i] = y;
}

function colorswitch_check_enemy_on(me:int):int
{
	var x = px[me];
	var y = py[me];
	
	var i:int;
	for( i, 0, MAX ){
		var et = type[i];
		if( et != 0 && i != me ){
			if( math.abs(x-px[i])<8 && math.abs(y-py[i]) <8 ){
				return 1;
			}
		}
	}
	return 0;
}


// 橋の切り替えの画面の更新
function colorswitch_redraw_area():void
{
	var y = 14;
	bg.fetch_area(bg.cur_area);
	
	loop(){
		bg.draw_map_horizontal(y);

		ppu.scroll2 = math.rand() % 4; // 振動
		
		ppu.wait_vsync_with_flag(2);
		
		if( y == 0 ){ break; }
		y -= 1;
	}
	
	ppu.scroll2 = 0;
}
