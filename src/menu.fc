options(bank:2, org:0xa000);

use * from common;
use mem;
use my;
use game;
use event;

include( "menu.asm" );

private:

const SCENE_ITEM = 0;
const SCENE_MEMORY = 1;
const SCENE_MAP = 2;
const SCENE_MAX = 3;

var scene:int;

public function start():void
{
	ppu.lock();
	var old_ppu_ctrl1 = ppu.ctrl1_bak;
	var old_cbank0 = mmc3.set_cbank(0,CBANK_ITEM);
	var old_cbank1 = mmc3.set_cbank(1,CBANK_TEXT);
	mmc3.MIRROR = 0; // vertical
	ppu.ctrl1_bak = 0b10100001;
	ppu.irq_setup = irq_setup;

	ppu.fill_in_lock( 0x2400, 4*32, 0 );
	ppu.put_in_lock( 0x2400+32*2+4, _T("アイテム　　記憶　　　地図　"), 14 );

	SCENE_INIT_FUNC[scene]();
	ppu.unlock();

	loop(){
		pad.update();
		if( pad.pushed & (pad.B|pad.SELECT) ){ break; }
		if( pad.pushed & pad.LEFT ){
			ppu.lock();
			scene = (scene+2)%SCENE_MAX;
			SCENE_INIT_FUNC[scene]();
			ppu.unlock();
		}elsif( pad.pushed & pad.RIGHT ){
			ppu.lock();
			scene = (scene+1)%SCENE_MAX;
			SCENE_INIT_FUNC[scene]();
			ppu.unlock();
		}elsif( pad.pushed & pad.A ){
			var r = SCENE_PROCESS_FUNC[scene]();
			if( r ){ break; }
		}
		ppu.sprite( 28 + scene * 40     , 11, SPR_CURSOR  , 1 );
		ppu.sprite( 28 + scene * 40 + 32, 11, SPR_CURSOR+2, 1 );
		SCENE_DRAW_FUNC[scene]();
		ppu.wait_vsync();
	}

	ppu.irq_setup = ppu.null_func;
	ppu.wait_vsync();
	ppu.lock();
	mmc3.set_cbank(0,old_cbank0);
	mmc3.set_cbank(1,old_cbank1);
	ppu.ctrl1_bak = old_ppu_ctrl1;
	ppu.put_in_lock( 0x3f00, bg.pallet, 16 );
	ppu.unlock();
	ppu.wait_vsync();
}

function irq_setup():void;

/*********************************************
 * アイテム画面
 *********************************************/

var item_idx:int;
var item_x:int;
var item_y:int;
var item_prev:int;
	
function item_init():void
{
	item_x = 0;
	item_y = 0;
	item_prev = -1;
	
	ppu.put_in_lock( 0x3f00, ITEM_PAL, 16 );
	ppu.fill_in_lock( 0x2400+4*32, 0x400-4*32, 0 );

	var i:int;
	for( i, 0, 18 ){
		put_item(i);
	}

}

function item_process():int
{
	loop(){
		pad.update();
		if( pad.pushed & pad.B ){ return 0; }
		if( pad.pushed & pad.SELECT ){ return 1; }
		if( pad.pushed & pad.UP ) item_y += 2;
		if( pad.pushed & pad.DOWN ) item_y += 1;
		if( pad.pushed & pad.RIGHT ) item_x += 1;
		if( pad.pushed & pad.LEFT ) item_x += 5;
		if( item_y >= 3 ) item_y -= 3;
		if( item_x >= 6 ) item_x -= 6;
		item_idx = item_y * 6 + item_x;

		gr_sprite2( (item_idx%6)*32+40, (item_idx/6)*32+40, SPR_CURSOR, 0 );
		
		if( item_prev != item_idx ){
			if( item_idx < 18 ){
				if( my.items[item_idx] ){
					ppu.wait_vsync();
					var buf = ppu.alloc(64);
					var buf2 = ppu.alloc(64);
					mem.zero( buf2, 64 );
					var size = fs.copy( buf, fs.ITEM_NAME_BASE+item_idx );
					buf[size] = 0;
					text_print( buf2, buf );
					var addr = ppu.pos(4,20)+0x400;
					ppu.put( addr, buf2, 64, 0 );
					ppu.wait_vsync();

					buf = ppu.alloc(64);
					buf2 = ppu.alloc(64);
					mem.zero( buf2, 64 );
					size = fs.copy( buf, fs.ITEM_DESC_BASE+item_idx );
					buf[size] = 0;
					text_print( buf2, buf );
					addr = ppu.pos(8,22)+0x400;
					ppu.put( addr, buf2, 64, 0 );
					ppu.wait_vsync();
				}else{
					var buf = ppu.alloc(64);
					mem.zero(buf, 64);
					var addr = ppu.pos(4,20)+0x400;
					ppu.put( addr, buf, 64, 0 );
					ppu.wait_vsync();
					ppu.put( addr + 64, buf, 64, 0 );
				}
			}
			item_prev = item_idx;
		}
		
		if( debug_mode && (pad.pushed & pad.A)){
			my.items[item_idx] = !my.items[item_idx];
			ppu.lock();
			put_item(item_idx);
			ppu.unlock();
		}
		
		ppu.wait_vsync();
	}
}

function put_item(i:int):void
{
	var y:int16 = i/6;
	var x = i%6;
	var addr:int16 = 0x2400+32*4+4 + (y<<7) + x*4;
	var buf = ppu.alloc(5);
	var c = i*4+32;
	var pal = ITEM_TILEPAL[8+i];
	if( !my.items[i] ){
		c = 8;
		pal = 2;
	}
	buf[0] = c+0;
	buf[1] = c+2;
	buf[2] = c+1;
	buf[3] = c+3;
	buf[4] = pal;
	ppu.put_in_lock( addr, buf, 2 );
	ppu.put_in_lock( addr+32, buf+2, 2 );
	ppu.put_in_lock( 0x27c0+9+y*8+x, buf+4, 1 );
}

function text_print(p:int*, str:int*):int
{
	var i = 0;
	var pi = 0;
	while(1){
		var c = str[i];
		if( c == 0 ){ break; }
		if( c == 3 || c == 4){
			p[pi] = c;
		}else{
			p[pi+32] = c;
			pi += 1;
		}
		i += 1;
	}
	return 0;
}

/*********************************************
 * 記憶画面
 *********************************************/
function memory_init():void
{
	ppu.fill_in_lock( 0x2400+4*32, 0x400-4*32, 0 );
}

function memory_process():int
{
}

/*********************************************
 * 記憶画面
 *********************************************/
var map_x:int;
var map_y:int;

function map_init():void
{
	ppu.put_in_lock( 0x3f00, bg.pallet, 16 );
	ppu.fill_in_lock( 0x2400+4*32, 0x400-4*32, 0 );
	
	if( !my.items[ITEM_ID_MAP] ){ return; }
	
	var x:int;
	var y:int;
	for( y, 0, 16 ){
		for( x, 0, 16 ){
			var m = my.get_map(x,y);
			if( m ) m = 13;
			ppu.gr_buf[x] = m;
		}
		ppu.put_in_lock( (0x2400+8*32+8)+(<int16>y)*32, ppu.gr_buf, 16 );
	}
}

function map_process():int
{
	if( !my.items[ITEM_ID_MAP] ){ return 0; }
	
	var ax = bg.cur_area % 16;
	var ay = bg.cur_area / 16;
	loop(){
		pad.update();
		if( pad.pushed & pad.B ){ return 0; }
		if( pad.pushed & pad.SELECT ){ return 1; }
		
		if( pad.pushed & pad.UP ){ ay = (ay+15)%16; }
		if( pad.pushed & pad.DOWN ){ ay = (ay+1)%16; }
		if( pad.pushed & pad.LEFT ){ ax = (ax+15)%16; }
		if( pad.pushed & pad.RIGHT ){ ax = (ax+1)%16; }

		if( my.items[ITEM_ID_WING] && (pad.pushed & pad.A) && my.get_map(ax,ay) ){
			// 羽で飛ぶa
			var i:int;
			for( i, 0, MAP_CHECKPOINT_NUM ){
				var cp = MAP_CHECKPOINT[i];
				var area = ay*16 + ax;
				if( MAP_CHECKPOINT_DATA[cp] == area ){
					game_event = event.ID_MOVE_CHECKPOINT;
					game_event_p1 = i;
					return 1;
				}
			}
		}

		// フリージャンプモードで飛ぶ
		if( debug_on(DEBUG_FLAG_FREEJUMP) && (pad.pushed & pad.A) ){
			var area = ay*16 + ax;
			game_event = event.ID_MOVE_AREA;
			game_event_p1 = area;
			return 1;
		}

		ppu.sprite( ax*8 + 64, ay*8 + 64, SPR_MAP_FLAG+2, 1 );
		map_draw();
		ppu.wait_vsync();
	}
}

function map_draw():void
{
	if( !my.items[ITEM_ID_MAP] ){ return; }
	var ax = bg.cur_area % 16;
	var ay = bg.cur_area / 16;
	ppu.sprite( ax*8 + 64, ay*8 + 64, SPR_MAP_FLAG+4, 0 );

	var i:int;
	for( i, 0, MAP_CHECKPOINT_NUM ){
		var cp = MAP_CHECKPOINT[i];
		var area = MAP_CHECKPOINT_DATA[cp];
		ax = area % 16;
		ay = area / 16;
		if( my.get_map(ax,ay) ){
			ppu.sprite( ax*8 + 64, ay*8 + 64, SPR_MAP_FLAG, 1 );
		}
	}

}

const SCENE_DRAW_FUNC = [ppu.null_func, ppu.null_func, map_draw];
const SCENE_INIT_FUNC = [item_init, memory_init, map_init];
const SCENE_PROCESS_FUNC = [item_process, memory_process, map_process];

