options(bank:-2);

use * from common;
use lzw;
use mem;
use bg;

var data:int[256] options(segment:"BSS_EX");
var enemy:int[256] options(segment:"BSS_EX");
var data_buf:int[2048] options(segment:"BSS_EX");
var enemy_num:int;

var buf_idx:int;
var buf:int[256] options(segment:"BSS_EX");
var pal:int[64] options(segment:"BSS_EX");
var blank_cell:int; // 空白のセル番号(空と黒を使い分けるため)

var pallet:int[32];

var cur_area:int;
var area_slot:int[2];

var tile_pal:int[64] options(segment:"BSS_EX");
var in_dark:int;
var area_type:int;

var tile_type:int[64] options(segment:"BSS_EX");
var _padding_for_align:int[64] options(segment:"BSS_EX"); // 256byte alignのため

const SPRITE_PALETTE:int[] = incbin("../res/images/sprite.nespal");

const TYPE_WALL = 1 << 0;
const TYPE_FLOOR = 1 << 1;
const TYPE_SPIKE = 1 << 2;
const TYPE_EWALL = 1 << 3;
const TYPE_STOP = TYPE_WALL | TYPE_EWALL | TYPE_FLOOR;
const TYPE_LADDER = 1 << 4;
const TYPE_WATER = 1 << 5;

// 1 WALL  : 壁
// 2 FLOOR : 床( 上半分だけの壁 )
// 4 SPIKE : とげ
// 8 EWALL : 自分は通れるが、敵が通れない
// 1 LADDER: はしご
// 2 WATER : 水
// 4
// 8
const TILE_TYPE:int[] =
	[   0,   0,   0,   0,   0,   0,   0,   0,
	    0,   1,   3,0x13,0x10,   0,   0,   0,
	    0,   1,   1,   0,   4,   4,   4,   4,
	 0x20,0x20,0x20,0x20,0x20,   1,   8,   1,

		// 中
		0,   1,   3,   0,   0,   0,   1,   0,
		4,   4,   4,   4,   4,   0,   0,   0,
		0,   0,   0,   0,   0,   0,   0,   0,
		1,   3,   1,   1,   1,   3,   0,   0,

		// 外
		1,   1,   1,   3,   0,   0,   1,   0,
		1,   1,   1,   0,   0,   0,   0,   0,
		0,   0,   0,   0,   0,   0,   0,   0,
		0,   0,   0,   0,   0,   0,   0,   0,

		// 西
		1,   1,   1,   3,   0,   0,   1,   0,
		1,   1,   1,   3,   4,   4,   4,   0,
		0,   0,   0,   0,   0,   0,   0,   0,
		1,   0,   1,   3,   1,   3,   0,   0,

		// 下
		1,   1,   1,   3,   0,   0,   1,   0,
		1,   1,   1,   3,   0,   0,   0,   0,
		0,   0,   0,   0,   0,   0,   0,   0,
		1,   0,   1,   3,   1,   3,   0,   0,

		// 空
		0,   0,   0,   0,   0,   0,   1,   0,
		0,   0,   0,   3,   0,   0,   0,   8,
		1,   1,   1,   3,   4,   4,   4,   4,
		1,   3,   0,   0,   0,   0,   0,   0,

		// 海底
		1,   1,   1,   3,   1,   0,   1,0x20,
		1,   1,   1,   3,   0,   1,   0,0x20,
		1,   1,   1,   0,   0,   1,   0,0x20,
		0,   0,   0,   0,   0,   1,   0,0x20,

		// 太陽神殿
		1,   1,   1,   1,   1,   0,   0,   0,
		1,   1,   1,   1,   0,   0,   0,   0,
		1,   0,   0,   0,   0,   0,   0,   0,
		1,   1,   1,   0,   0,   0,   0,   0];

private:

public function init():void
{
	cur_area = 0;
	buf_idx = 0;
	in_dark = 0;
	ppu.on_wait_vsync = ->void(){ buf_idx = 0; };
	//fs.copy( tile_pal, fs.TILE_PAL_BASE+0 );
	//fs.copy( &tile_pal[32], fs.TILE_PAL_BASE+1 );
	mem.copy( tile_type, TILE_TYPE, 64 );
}

public function cell(x:int, y:int):int options(fastcall:true)
{
	return data[(y/16)*16 + x/16];
}

public function cell_type(x:int, y:int):int options(fastcall:true)
{
	return tile_type[data[(y/16)*16 + x/16]];
}

function set_pal(x:int, y:int, _pal:int):int options(fastcall:true)
{
	var pal_addr:int8 = (y/2)*8 + x/2;
	var pos = (((y%2)*2) | (x%2))*2;
	var mask:int = (0b00000011 << pos) ^ 0xff;
	pal[pal_addr] = (pal[pal_addr] & mask) | (_pal << pos);
	return pal_addr;
}

public function put2(x:int, y:int, n:int, pal:int):void
{
	data[y*16+x] = n;
	put(x,y,n,pal);
}

public function put(x:int, y:int, n:int, _pal:int):void
{
	var y16:int16 = y;
	var addr:int16 = 0x2000 + y16*64 + x*2;
	if( n < 32 && BLANK_CELL[n] ){ n = blank_cell; }
	var ni = n * 4;
	buf[buf_idx+0] = ni;
	buf[buf_idx+1] = ni+2;
	buf[buf_idx+2] = ni+1;
	buf[buf_idx+3] = ni+3;
	ppu.put( addr, &buf[buf_idx], 2, 0 );
	ppu.put( addr+32, &buf[buf_idx+2], 2, 0 );
	buf_idx += 4;
	
	var pal_addr = set_pal(x,y,_pal);
	ppu.put( 0x23c0 + pal_addr, &pal[pal_addr], 1, 0 );
}

function draw_screen():void
{
	var ax:int, ay:int;
	for(ax, 0, 16){
		for(ay, 0, 15){
			var cell:int = data[ay*16+ax];
			put_in_lock(ax, ay, cell);
		}
	}
}

const WG_AREA_NUM = 8;
const WG_AREA = [10+ 9*16, 0+0*16,
				 11+ 9*16, 0+1*16,
				 11+10*16, 0+2*16,
				 11+11*16, 0+3*16,
				 11+12*16, 1+0*16,
				 11+13*16, 1+1*16,
				 12+13*16, 1+2*16,
				 13+13*16, 1+3*16
				 ];

public function update_palette():void
{
	ppu.put( 0x3f00+16, &pallet[16], 16, 0 );
}

function pal_down(pal:int*, size:int, pow:int):void options(fastcall:true)
{
	var i:int;
	var n = pow*16;
	for( i, 0, size ){
		var c = pal[i];
		if( c != 0x0d ){
			c = c - n;
			if( c > 64 ){ c = 0x0d; }
			pal[i] = c;
		}
	}
}

function put_in_lock(x:int, y:int, n:int):void
{
	var y16:int16 = y;
	var addr:int16 = 0x2000 + y16*64 + x*2;
	if( n < 32 && BLANK_CELL[n] ){ n = blank_cell; }
	var ni = n * 4;
	buf[0] = ni;
	buf[1] = ni+2;
	buf[2] = ni+1;
	buf[3] = ni+3;
	ppu.put_in_lock( addr, buf, 2 );
	ppu.put_in_lock( addr+32, &buf[2], 2 );

	var pal_addr = set_pal(x,y,tile_pal[n]);
	ppu.put_in_lock( 0x23c0 + pal_addr, &pal[pal_addr], 1 );
}

const BLANK_CELL = [ 0,0,0,0,1,1,1,1,
					 0,0,0,0,0,0,0,0,
					 0,0,0,0,0,0,0,0,
					 0,0,0,0,0,0,1,0];

function draw_map_vertical(x:int):void
{
	var addr:int16 = 0x2000 + x*2;
	var y:int;
	for( y, 0, 15 ){
		var n = data[y*16+x];
		if( n < 32 && BLANK_CELL[n] ){ n = blank_cell; }
		var ni = n * 4;
		var idx = buf_idx+y*2;
		buf[idx] = ni;
		buf[idx+1] = ni+1;
		buf[idx+30] = ni+2;
		buf[idx+31] = ni+3;
		set_pal(x,y,tile_pal[n]);
	}
	ppu.put( addr, &buf[buf_idx], 30, ppu.VERTICAL);
	ppu.put( addr+1, &buf[buf_idx+30], 30, ppu.VERTICAL);
	// gr_add( 0x23c0 + x/2, &bg_pal[x/2], 8, PPU_ATTRIBUTE ); // 間に合わないので外に出す
	buf_idx += 60;
}

function draw_map_horizontal(y:int):void
{
	var y16:int16 = y;
	var addr:int16 = 0x2000 + y16*64;
	var x:int;
	for( x, 0, 16 ){
		var n = data[y*16+x];
		if( n < 32 && BLANK_CELL[n] ){ n = blank_cell; }
		var ni = n * 4;
		var idx = buf_idx+x*2;
		buf[idx] = ni;
		buf[idx+1] = ni+2;
		buf[idx+32] = ni+1;
		buf[idx+33] = ni+3;
		set_pal(x,y,tile_pal[n]);
	}
	ppu.put( addr, &buf[buf_idx], 64, ppu.HORIZONTAL);
	var pal_addr = (y/2)*8;
	ppu.put( 0x23c0 + pal_addr, &pal[pal_addr], 8, ppu.HORIZONTAL );
	buf_idx += 64;
}

