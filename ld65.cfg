# memory config for ld65

MEMORY {
  ZP: start = $00, size = $60, type = rw, define = yes;
  ZP_STACK: start = $80, size = $80, type = rw, define = yes;
  SRAM: start = $0200, size = $0500, type = rw, define = yes;
  SRAM_EX: start = $6000, size = $1e00, type = rw, define = yes;
  SRAM_SAVEDATA: start = $7e00, size = $0200, type = rw, define = yes;
  HEADER: start = $0000, size = $10, file = %O, fill = yes;
  ROM0: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
  ROM1: start = $a000, size = $2000, file = %O, fill = yes, define = yes;
  ROM2: start = $a000, size = $2000, file = %O, fill = yes, define = yes;
  ROM3: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
  ROM4: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
  ROM5: start = $a000, size = $2000, file = %O, fill = yes, define = yes;
  ROM6: start = $a000, size = $2000, file = %O, fill = yes, define = yes;
  ROMF: start = $8000, size = $2E000, file = %O, fill = yes, define = yes;
  ROML: start = $c000, size = $3ffa, file = %O, fill = yes, define = yes;
  ROMV: start = $fffa, size = $0006, file = %O, fill = yes;
  ROMC: start = $0000, size = $10000, file = %O, fill = yes;
}

SEGMENTS {
  HEADER: load = HEADER, type = ro;
  VECTORS: load = ROMV, type = rw;
  CHARS: load = ROMC, type = rw, optional = yes;
  ZEROPAGE: load = ZP, type = zp;
  FC_ZEROPAGE: load = ZP, type = zp;
  FC_STACK: load = ZP_STACK, type = zp;
  BSS: load = SRAM, type= bss, define = yes;
  BSS_EX: load = SRAM_EX, type= bss, define = yes;
  BSS_SAVEDATA: load = SRAM_SAVEDATA, type= bss, define = yes;
  
  CODE: load = ROML, type = ro, define = yes;
  RODATA: load = ROML, type = ro, define = yes;
  FC_RUNTIME: load = ROML, type = ro, define = yes;
  main: load = ROML, type = ro;
  common: load = ROML, type = ro;
  ppu: load = ROML, type = ro;
  fs: load = ROML, type = ro;
  mem: load = ROML, type = ro;
  lzw: load = ROML, type = ro;
  math: load = ROML, type = ro;
  sound: load = ROML, type = ro;
  mmc3: load = ROML, type = ro;
  pad: load = ROML, type = ro;
  savedata: load = ROML, type = ro;
  resource: load = ROML, type = ro;
  bg: load = ROML, type = ro;
  
  my: load = ROM5, type = ro;
  game: load = ROM0, type = ro;
  title: load = ROM6, type = ro;
  en: load = ROM1, type = ro;
  event: load = ROM2, type = ro;
  debug_menu: load = ROM2, type = ro;
  menu: load = ROM2, type = ro;
  en1: load = ROM3, type = ro;
  en2: load = ROM4, type = ro;
  
  fs_data: load = ROMF, type = ro;
  # nes: load = ROM0, type = ro;
  # nsd_inc: load = ROM3, type = ro;
  # music: load = ROM13, type = ro;
}
